
300_004_DC_MOTOR_WITH_ENCODER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003178  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003300  08003300  00013300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003310  08003310  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003310  08003310  00013310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003318  08003318  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003318  08003318  00013318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800331c  0800331c  0001331c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000012c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000013c  2000013c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009e5c  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000019c1  00000000  00000000  00029edf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a38  00000000  00000000  0002b8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007da  00000000  00000000  0002c2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fd3f  00000000  00000000  0002cab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ad7b  00000000  00000000  0004c7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4bdb  00000000  00000000  0005756c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002a04  00000000  00000000  0011c148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  0011eb4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080032e8 	.word	0x080032e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080032e8 	.word	0x080032e8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <Motor_Init>:

motor_param* Encoder_GetParameters(void) {
    return &parameters;                             // Yapının adresini döndür
}

void Motor_Init(uint16_t dutyCycle, uint8_t directionInfo) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	460a      	mov	r2, r1
 80004ce:	80fb      	strh	r3, [r7, #6]
 80004d0:	4613      	mov	r3, r2
 80004d2:	717b      	strb	r3, [r7, #5]
    if(directionInfo == 1) {                        // İleri yön
 80004d4:	797b      	ldrb	r3, [r7, #5]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d11b      	bne.n	8000512 <Motor_Init+0x4e>
        HAL_GPIO_WritePin(Motor_Forward_GPIO_Port, Motor_Forward_Pin, GPIO_PIN_SET);
 80004da:	2201      	movs	r2, #1
 80004dc:	2101      	movs	r1, #1
 80004de:	481e      	ldr	r0, [pc, #120]	; (8000558 <Motor_Init+0x94>)
 80004e0:	f001 f9bc 	bl	800185c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Motor_Backward_GPIO_Port, Motor_Backward_Pin, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2102      	movs	r1, #2
 80004e8:	481b      	ldr	r0, [pc, #108]	; (8000558 <Motor_Init+0x94>)
 80004ea:	f001 f9b7 	bl	800185c <HAL_GPIO_WritePin>
        for(int i = 0; i <= dutyCycle; i++) {
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	e009      	b.n	8000508 <Motor_Init+0x44>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);  // PWM duty cycle arttır
 80004f4:	4b19      	ldr	r3, [pc, #100]	; (800055c <Motor_Init+0x98>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	68fa      	ldr	r2, [r7, #12]
 80004fa:	635a      	str	r2, [r3, #52]	; 0x34
            HAL_Delay(5);                                     // Yavaş yavaş başlat
 80004fc:	2005      	movs	r0, #5
 80004fe:	f000 fec3 	bl	8001288 <HAL_Delay>
        for(int i = 0; i <= dutyCycle; i++) {
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	3301      	adds	r3, #1
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	88fb      	ldrh	r3, [r7, #6]
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	429a      	cmp	r2, r3
 800050e:	ddf1      	ble.n	80004f4 <Motor_Init+0x30>
            HAL_Delay(5);
        }
    } else {
        // Geçersiz yön bilgisi
    }
}
 8000510:	e01d      	b.n	800054e <Motor_Init+0x8a>
    } else if(directionInfo == 0) {                 // Geri yön
 8000512:	797b      	ldrb	r3, [r7, #5]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d11a      	bne.n	800054e <Motor_Init+0x8a>
        HAL_GPIO_WritePin(Motor_Backward_GPIO_Port, Motor_Backward_Pin, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2102      	movs	r1, #2
 800051c:	480e      	ldr	r0, [pc, #56]	; (8000558 <Motor_Init+0x94>)
 800051e:	f001 f99d 	bl	800185c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Motor_Forward_GPIO_Port, Motor_Forward_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2101      	movs	r1, #1
 8000526:	480c      	ldr	r0, [pc, #48]	; (8000558 <Motor_Init+0x94>)
 8000528:	f001 f998 	bl	800185c <HAL_GPIO_WritePin>
        for(int i = 0; i <= dutyCycle; i++) {
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	e009      	b.n	8000546 <Motor_Init+0x82>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <Motor_Init+0x98>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	68ba      	ldr	r2, [r7, #8]
 8000538:	635a      	str	r2, [r3, #52]	; 0x34
            HAL_Delay(5);
 800053a:	2005      	movs	r0, #5
 800053c:	f000 fea4 	bl	8001288 <HAL_Delay>
        for(int i = 0; i <= dutyCycle; i++) {
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	3301      	adds	r3, #1
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	68ba      	ldr	r2, [r7, #8]
 800054a:	429a      	cmp	r2, r3
 800054c:	ddf1      	ble.n	8000532 <Motor_Init+0x6e>
}
 800054e:	bf00      	nop
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40020000 	.word	0x40020000
 800055c:	20000048 	.word	0x20000048

08000560 <Encoder_Update>:

void Encoder_Update() {
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
    if(HAL_GPIO_ReadPin(GPIOA, Encoder_Phase_A_Pin) == GPIO_PIN_SET) {
 8000564:	2108      	movs	r1, #8
 8000566:	4810      	ldr	r0, [pc, #64]	; (80005a8 <Encoder_Update+0x48>)
 8000568:	f001 f960 	bl	800182c <HAL_GPIO_ReadPin>
 800056c:	4603      	mov	r3, r0
 800056e:	2b01      	cmp	r3, #1
 8000570:	d118      	bne.n	80005a4 <Encoder_Update+0x44>
        if(HAL_GPIO_ReadPin(GPIOA, Encoder_Phase_B_Pin) == GPIO_PIN_SET) {
 8000572:	2110      	movs	r1, #16
 8000574:	480c      	ldr	r0, [pc, #48]	; (80005a8 <Encoder_Update+0x48>)
 8000576:	f001 f959 	bl	800182c <HAL_GPIO_ReadPin>
 800057a:	4603      	mov	r3, r0
 800057c:	2b01      	cmp	r3, #1
 800057e:	d105      	bne.n	800058c <Encoder_Update+0x2c>
            parameters.encoderPulse++;             // Saat yönü
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <Encoder_Update+0x4c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	4a09      	ldr	r2, [pc, #36]	; (80005ac <Encoder_Update+0x4c>)
 8000588:	6013      	str	r3, [r2, #0]
        } else if(HAL_GPIO_ReadPin(GPIOA, Encoder_Phase_B_Pin) == GPIO_PIN_RESET) {
            parameters.encoderPulse--;             // Saat yönü tersi
        }
    }
}
 800058a:	e00b      	b.n	80005a4 <Encoder_Update+0x44>
        } else if(HAL_GPIO_ReadPin(GPIOA, Encoder_Phase_B_Pin) == GPIO_PIN_RESET) {
 800058c:	2110      	movs	r1, #16
 800058e:	4806      	ldr	r0, [pc, #24]	; (80005a8 <Encoder_Update+0x48>)
 8000590:	f001 f94c 	bl	800182c <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d104      	bne.n	80005a4 <Encoder_Update+0x44>
            parameters.encoderPulse--;             // Saat yönü tersi
 800059a:	4b04      	ldr	r3, [pc, #16]	; (80005ac <Encoder_Update+0x4c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	3b01      	subs	r3, #1
 80005a0:	4a02      	ldr	r2, [pc, #8]	; (80005ac <Encoder_Update+0x4c>)
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40020000 	.word	0x40020000
 80005ac:	2000002c 	.word	0x2000002c

080005b0 <Encoder_GetDeltaWithOverflow>:

int32_t Encoder_GetDeltaWithOverflow(int32_t current, int32_t previous) {
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
    if(current >= previous) {
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	429a      	cmp	r2, r3
 80005c0:	db03      	blt.n	80005ca <Encoder_GetDeltaWithOverflow+0x1a>
        return current - previous;                 // Normal artış
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	1ad3      	subs	r3, r2, r3
 80005c8:	e008      	b.n	80005dc <Encoder_GetDeltaWithOverflow+0x2c>
    } else {
        return (INT32_MAX - previous + 1) + (current - INT32_MIN);  // Overflow düzeltmesi
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	1c5a      	adds	r2, r3, #1
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80005da:	4413      	add	r3, r2
    }
}
 80005dc:	4618      	mov	r0, r3
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <Encoder_CalculateSpeedAndAcceleration>:

void Encoder_CalculateSpeedAndAcceleration() {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
    parameters.deltaPulse = Encoder_GetDeltaWithOverflow(parameters.encoderPulse, parameters.previousEncoderPulse);
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <Encoder_CalculateSpeedAndAcceleration+0x70>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a19      	ldr	r2, [pc, #100]	; (8000658 <Encoder_CalculateSpeedAndAcceleration+0x70>)
 80005f2:	6852      	ldr	r2, [r2, #4]
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ffda 	bl	80005b0 <Encoder_GetDeltaWithOverflow>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a16      	ldr	r2, [pc, #88]	; (8000658 <Encoder_CalculateSpeedAndAcceleration+0x70>)
 8000600:	6093      	str	r3, [r2, #8]
    parameters.previousEncoderPulse = parameters.encoderPulse;
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <Encoder_CalculateSpeedAndAcceleration+0x70>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a14      	ldr	r2, [pc, #80]	; (8000658 <Encoder_CalculateSpeedAndAcceleration+0x70>)
 8000608:	6053      	str	r3, [r2, #4]

    parameters.speed = ((float)parameters.deltaPulse / (float)ENCODER_PULSE_PER_REV)
 800060a:	4b13      	ldr	r3, [pc, #76]	; (8000658 <Encoder_CalculateSpeedAndAcceleration+0x70>)
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	ee07 3a90 	vmov	s15, r3
 8000612:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000616:	eddf 6a11 	vldr	s13, [pc, #68]	; 800065c <Encoder_CalculateSpeedAndAcceleration+0x74>
 800061a:	eec7 7a26 	vdiv.f32	s15, s14, s13
                     * (SEC_TO_MINUTE / SPEED_CALC_PERIOD);       // Hız hesaplama
 800061e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000660 <Encoder_CalculateSpeedAndAcceleration+0x78>
 8000622:	ee67 7a87 	vmul.f32	s15, s15, s14
    parameters.speed = ((float)parameters.deltaPulse / (float)ENCODER_PULSE_PER_REV)
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <Encoder_CalculateSpeedAndAcceleration+0x70>)
 8000628:	edc3 7a04 	vstr	s15, [r3, #16]

    parameters.acceleration = (parameters.speed - parameters.previousSpeed) / SPEED_CALC_PERIOD; // İvme
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <Encoder_CalculateSpeedAndAcceleration+0x70>)
 800062e:	ed93 7a04 	vldr	s14, [r3, #16]
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <Encoder_CalculateSpeedAndAcceleration+0x70>)
 8000634:	edd3 7a05 	vldr	s15, [r3, #20]
 8000638:	ee37 7a67 	vsub.f32	s14, s14, s15
 800063c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000664 <Encoder_CalculateSpeedAndAcceleration+0x7c>
 8000640:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <Encoder_CalculateSpeedAndAcceleration+0x70>)
 8000646:	edc3 7a06 	vstr	s15, [r3, #24]
    parameters.previousSpeed = parameters.speed;
 800064a:	4b03      	ldr	r3, [pc, #12]	; (8000658 <Encoder_CalculateSpeedAndAcceleration+0x70>)
 800064c:	691b      	ldr	r3, [r3, #16]
 800064e:	4a02      	ldr	r2, [pc, #8]	; (8000658 <Encoder_CalculateSpeedAndAcceleration+0x70>)
 8000650:	6153      	str	r3, [r2, #20]
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2000002c 	.word	0x2000002c
 800065c:	42900000 	.word	0x42900000
 8000660:	44960000 	.word	0x44960000
 8000664:	3d4ccccd 	.word	0x3d4ccccd

08000668 <Motor_SetPwmDutyCycle>:

void Motor_SetPwmDutyCycle(uint16_t dutyCycle) {
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	80fb      	strh	r3, [r7, #6]
	if(dutyCycle > 0 && dutyCycle < motorStartThresold)
	{
		dutyCycle = motorStartThresold;
	}*/

	if(dutyCycle > 1000)
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000678:	d902      	bls.n	8000680 <Motor_SetPwmDutyCycle+0x18>
	{
		dutyCycle = 1000;
 800067a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067e:	80fb      	strh	r3, [r7, #6]

	else if(dutyCycle < 0)
	{
		dutyCycle = 0;
	}
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);      // PWM duty cycle ayarla
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <Motor_SetPwmDutyCycle+0x2c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	88fa      	ldrh	r2, [r7, #6]
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	20000048 	.word	0x20000048

08000698 <Encoder_GetRPM>:

uint16_t Encoder_GetRPM(void) {
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
    parameters.rpm = parameters.encoderPulse / ENCODER_PULSE_PER_REV; // RPM hesapla
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <Encoder_GetRPM+0x2c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a09      	ldr	r2, [pc, #36]	; (80006c8 <Encoder_GetRPM+0x30>)
 80006a2:	fb82 1203 	smull	r1, r2, r2, r3
 80006a6:	1112      	asrs	r2, r2, #4
 80006a8:	17db      	asrs	r3, r3, #31
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <Encoder_GetRPM+0x2c>)
 80006b0:	819a      	strh	r2, [r3, #12]
    return parameters.rpm;
 80006b2:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <Encoder_GetRPM+0x2c>)
 80006b4:	899b      	ldrh	r3, [r3, #12]
 80006b6:	b29b      	uxth	r3, r3
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	2000002c 	.word	0x2000002c
 80006c8:	38e38e39 	.word	0x38e38e39

080006cc <Encoder_GetSpeed>:

float Encoder_GetSpeed(void) {
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
    if(parameters.speed < 0) {
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <Encoder_GetSpeed+0x38>)
 80006d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80006d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006de:	d507      	bpl.n	80006f0 <Encoder_GetSpeed+0x24>
        parameters.speed = -parameters.speed;      // Negatif hız varsa pozitife çevir
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <Encoder_GetSpeed+0x38>)
 80006e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80006e6:	eef1 7a67 	vneg.f32	s15, s15
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <Encoder_GetSpeed+0x38>)
 80006ec:	edc3 7a04 	vstr	s15, [r3, #16]
    }
    return parameters.speed;
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <Encoder_GetSpeed+0x38>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	ee07 3a90 	vmov	s15, r3
}
 80006f8:	eeb0 0a67 	vmov.f32	s0, s15
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	2000002c 	.word	0x2000002c

08000708 <Encoder_GetAngle>:

float Encoder_GetAngle(void) {
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
    parameters.angle = (parameters.encoderPulse % ENCODER_PULSE_PER_REV)
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <Encoder_GetAngle+0x48>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <Encoder_GetAngle+0x4c>)
 8000712:	fb83 1302 	smull	r1, r3, r3, r2
 8000716:	1119      	asrs	r1, r3, #4
 8000718:	17d3      	asrs	r3, r2, #31
 800071a:	1ac9      	subs	r1, r1, r3
 800071c:	460b      	mov	r3, r1
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	440b      	add	r3, r1
 8000722:	00db      	lsls	r3, r3, #3
 8000724:	1ad1      	subs	r1, r2, r3
 8000726:	b28b      	uxth	r3, r1
 8000728:	461a      	mov	r2, r3
 800072a:	0092      	lsls	r2, r2, #2
 800072c:	4413      	add	r3, r2
 800072e:	b29b      	uxth	r3, r3
 8000730:	b21a      	sxth	r2, r3
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <Encoder_GetAngle+0x48>)
 8000734:	81da      	strh	r2, [r3, #14]
                     * (360 / ENCODER_PULSE_PER_REV);             // 0-360 derece açı hesapla
    return parameters.angle;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <Encoder_GetAngle+0x48>)
 8000738:	89db      	ldrh	r3, [r3, #14]
 800073a:	b21b      	sxth	r3, r3
 800073c:	ee07 3a90 	vmov	s15, r3
 8000740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000744:	eeb0 0a67 	vmov.f32	s0, s15
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	2000002c 	.word	0x2000002c
 8000754:	38e38e39 	.word	0x38e38e39

08000758 <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(void) {
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
    return parameters.acceleration;                // İvme değeri döndür
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <Encoder_GetAcceleration+0x18>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	ee07 3a90 	vmov	s15, r3
}
 8000764:	eeb0 0a67 	vmov.f32	s0, s15
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	2000002c 	.word	0x2000002c

08000774 <Encoder_GetEncoderPulse>:

int16_t Encoder_GetEncoderPulse(void) {
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
    return parameters.encoderPulse;               // Enkoderden gelen pulse değerini döndör
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <Encoder_GetEncoderPulse+0x14>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	b21b      	sxth	r3, r3
}
 800077e:	4618      	mov	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	2000002c 	.word	0x2000002c

0800078c <Encoder_GetPreviousEncoderPulse>:

int16_t Encoder_GetPreviousEncoderPulse(void) {
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
    return parameters.previousEncoderPulse;      // Son interruptaki pulse değerini döndür
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <Encoder_GetPreviousEncoderPulse+0x14>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	b21b      	sxth	r3, r3
}
 8000796:	4618      	mov	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	2000002c 	.word	0x2000002c

080007a4 <Encoder_GetDeltaPulse>:

int16_t Encoder_GetDeltaPulse(void) {
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
    return parameters.deltaPulse;                // Pulse değişim değerini döndür
 80007a8:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <Encoder_GetDeltaPulse+0x14>)
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	b21b      	sxth	r3, r3
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	2000002c 	.word	0x2000002c

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c0:	f000 fcf0 	bl	80011a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c4:	f000 f878 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c8:	f000 f9b2 	bl	8000b30 <MX_GPIO_Init>
  MX_TIM1_Init();
 80007cc:	f000 f8de 	bl	800098c <MX_TIM1_Init>
  MX_TIM3_Init();
 80007d0:	f000 f960 	bl	8000a94 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007d4:	2100      	movs	r1, #0
 80007d6:	4826      	ldr	r0, [pc, #152]	; (8000870 <main+0xb4>)
 80007d8:	f001 fde6 	bl	80023a8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80007dc:	4825      	ldr	r0, [pc, #148]	; (8000874 <main+0xb8>)
 80007de:	f001 fd23 	bl	8002228 <HAL_TIM_Base_Start_IT>
  Motor_Init(1000, 0);
 80007e2:	2100      	movs	r1, #0
 80007e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e8:	f7ff fe6c 	bl	80004c4 <Motor_Init>
  pidInit(&controller, 1.0f, 0.01f, 0.02f, 0.05f,  200, -200, 1000, -1000, 450, 0);
 80007ec:	eddf 4a22 	vldr	s9, [pc, #136]	; 8000878 <main+0xbc>
 80007f0:	ed9f 4a22 	vldr	s8, [pc, #136]	; 800087c <main+0xc0>
 80007f4:	eddf 3a22 	vldr	s7, [pc, #136]	; 8000880 <main+0xc4>
 80007f8:	ed9f 3a22 	vldr	s6, [pc, #136]	; 8000884 <main+0xc8>
 80007fc:	eddf 2a22 	vldr	s5, [pc, #136]	; 8000888 <main+0xcc>
 8000800:	ed9f 2a22 	vldr	s4, [pc, #136]	; 800088c <main+0xd0>
 8000804:	eddf 1a22 	vldr	s3, [pc, #136]	; 8000890 <main+0xd4>
 8000808:	ed9f 1a22 	vldr	s2, [pc, #136]	; 8000894 <main+0xd8>
 800080c:	eddf 0a22 	vldr	s1, [pc, #136]	; 8000898 <main+0xdc>
 8000810:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000814:	4821      	ldr	r0, [pc, #132]	; (800089c <main+0xe0>)
 8000816:	f000 faa2 	bl	8000d5e <pidInit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	   rpm=Encoder_GetRPM();
 800081a:	f7ff ff3d 	bl	8000698 <Encoder_GetRPM>
 800081e:	4603      	mov	r3, r0
 8000820:	ee07 3a90 	vmov	s15, r3
 8000824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <main+0xe4>)
 800082a:	edc3 7a00 	vstr	s15, [r3]
	   angle = Encoder_GetAngle();
 800082e:	f7ff ff6b 	bl	8000708 <Encoder_GetAngle>
 8000832:	eef0 7a40 	vmov.f32	s15, s0
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <main+0xe8>)
 8000838:	edc3 7a00 	vstr	s15, [r3]
	   motorAccerelation = Encoder_GetAcceleration();
 800083c:	f7ff ff8c 	bl	8000758 <Encoder_GetAcceleration>
 8000840:	eef0 7a40 	vmov.f32	s15, s0
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <main+0xec>)
 8000846:	edc3 7a00 	vstr	s15, [r3]
	   encoderPulse = Encoder_GetEncoderPulse();
 800084a:	f7ff ff93 	bl	8000774 <Encoder_GetEncoderPulse>
 800084e:	4603      	mov	r3, r0
 8000850:	461a      	mov	r2, r3
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <main+0xf0>)
 8000854:	801a      	strh	r2, [r3, #0]
	   previousEncoderPulse = Encoder_GetPreviousEncoderPulse();
 8000856:	f7ff ff99 	bl	800078c <Encoder_GetPreviousEncoderPulse>
 800085a:	4603      	mov	r3, r0
 800085c:	461a      	mov	r2, r3
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <main+0xf4>)
 8000860:	801a      	strh	r2, [r3, #0]
	   deltaPulse = Encoder_GetDeltaPulse();
 8000862:	f7ff ff9f 	bl	80007a4 <Encoder_GetDeltaPulse>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <main+0xf8>)
 800086c:	801a      	strh	r2, [r3, #0]
	   rpm=Encoder_GetRPM();
 800086e:	e7d4      	b.n	800081a <main+0x5e>
 8000870:	20000048 	.word	0x20000048
 8000874:	20000090 	.word	0x20000090
 8000878:	00000000 	.word	0x00000000
 800087c:	43e10000 	.word	0x43e10000
 8000880:	c47a0000 	.word	0xc47a0000
 8000884:	447a0000 	.word	0x447a0000
 8000888:	c3480000 	.word	0xc3480000
 800088c:	43480000 	.word	0x43480000
 8000890:	3d4ccccd 	.word	0x3d4ccccd
 8000894:	3ca3d70a 	.word	0x3ca3d70a
 8000898:	3c23d70a 	.word	0x3c23d70a
 800089c:	200000e0 	.word	0x200000e0
 80008a0:	20000128 	.word	0x20000128
 80008a4:	2000012c 	.word	0x2000012c
 80008a8:	20000134 	.word	0x20000134
 80008ac:	200000d8 	.word	0x200000d8
 80008b0:	200000da 	.word	0x200000da
 80008b4:	200000dc 	.word	0x200000dc

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	; 0x50
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	2230      	movs	r2, #48	; 0x30
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f002 fce2 	bl	8003290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	4b28      	ldr	r3, [pc, #160]	; (8000984 <SystemClock_Config+0xcc>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	4a27      	ldr	r2, [pc, #156]	; (8000984 <SystemClock_Config+0xcc>)
 80008e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ea:	6413      	str	r3, [r2, #64]	; 0x40
 80008ec:	4b25      	ldr	r3, [pc, #148]	; (8000984 <SystemClock_Config+0xcc>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	4b22      	ldr	r3, [pc, #136]	; (8000988 <SystemClock_Config+0xd0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a21      	ldr	r2, [pc, #132]	; (8000988 <SystemClock_Config+0xd0>)
 8000902:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <SystemClock_Config+0xd0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	2302      	movs	r3, #2
 8000920:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000922:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000926:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000928:	2304      	movs	r3, #4
 800092a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800092c:	23a8      	movs	r3, #168	; 0xa8
 800092e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000930:	2302      	movs	r3, #2
 8000932:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000934:	2304      	movs	r3, #4
 8000936:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000938:	f107 0320 	add.w	r3, r7, #32
 800093c:	4618      	mov	r0, r3
 800093e:	f000 ffbf 	bl	80018c0 <HAL_RCC_OscConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000948:	f000 fa04 	bl	8000d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094c:	230f      	movs	r3, #15
 800094e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000950:	2302      	movs	r3, #2
 8000952:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000958:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800095c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800095e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000962:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2105      	movs	r1, #5
 800096a:	4618      	mov	r0, r3
 800096c:	f001 fa20 	bl	8001db0 <HAL_RCC_ClockConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000976:	f000 f9ed 	bl	8000d54 <Error_Handler>
  }
}
 800097a:	bf00      	nop
 800097c:	3750      	adds	r7, #80	; 0x50
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40007000 	.word	0x40007000

0800098c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b092      	sub	sp, #72	; 0x48
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000992:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]
 80009ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2220      	movs	r2, #32
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 fc6a 	bl	8003290 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009bc:	4b33      	ldr	r3, [pc, #204]	; (8000a8c <MX_TIM1_Init+0x100>)
 80009be:	4a34      	ldr	r2, [pc, #208]	; (8000a90 <MX_TIM1_Init+0x104>)
 80009c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80009c2:	4b32      	ldr	r3, [pc, #200]	; (8000a8c <MX_TIM1_Init+0x100>)
 80009c4:	2253      	movs	r2, #83	; 0x53
 80009c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b30      	ldr	r3, [pc, #192]	; (8000a8c <MX_TIM1_Init+0x100>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80009ce:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <MX_TIM1_Init+0x100>)
 80009d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d6:	4b2d      	ldr	r3, [pc, #180]	; (8000a8c <MX_TIM1_Init+0x100>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009dc:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <MX_TIM1_Init+0x100>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e2:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <MX_TIM1_Init+0x100>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009e8:	4828      	ldr	r0, [pc, #160]	; (8000a8c <MX_TIM1_Init+0x100>)
 80009ea:	f001 fc8d 	bl	8002308 <HAL_TIM_PWM_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80009f4:	f000 f9ae 	bl	8000d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a04:	4619      	mov	r1, r3
 8000a06:	4821      	ldr	r0, [pc, #132]	; (8000a8c <MX_TIM1_Init+0x100>)
 8000a08:	f002 fb60 	bl	80030cc <HAL_TIMEx_MasterConfigSynchronization>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000a12:	f000 f99f 	bl	8000d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a16:	2360      	movs	r3, #96	; 0x60
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a22:	2300      	movs	r3, #0
 8000a24:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	2200      	movs	r2, #0
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4814      	ldr	r0, [pc, #80]	; (8000a8c <MX_TIM1_Init+0x100>)
 8000a3c:	f001 fe84 	bl	8002748 <HAL_TIM_PWM_ConfigChannel>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000a46:	f000 f985 	bl	8000d54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4807      	ldr	r0, [pc, #28]	; (8000a8c <MX_TIM1_Init+0x100>)
 8000a6e:	f002 fba9 	bl	80031c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000a78:	f000 f96c 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <MX_TIM1_Init+0x100>)
 8000a7e:	f000 fadf 	bl	8001040 <HAL_TIM_MspPostInit>

}
 8000a82:	bf00      	nop
 8000a84:	3748      	adds	r7, #72	; 0x48
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000048 	.word	0x20000048
 8000a90:	40010000 	.word	0x40010000

08000a94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <MX_TIM3_Init+0x94>)
 8000ab2:	4a1e      	ldr	r2, [pc, #120]	; (8000b2c <MX_TIM3_Init+0x98>)
 8000ab4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_TIM3_Init+0x94>)
 8000ab8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000abc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_TIM3_Init+0x94>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8000ac4:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <MX_TIM3_Init+0x94>)
 8000ac6:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000aca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_TIM3_Init+0x94>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <MX_TIM3_Init+0x94>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ad8:	4813      	ldr	r0, [pc, #76]	; (8000b28 <MX_TIM3_Init+0x94>)
 8000ada:	f001 fb55 	bl	8002188 <HAL_TIM_Base_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ae4:	f000 f936 	bl	8000d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	4619      	mov	r1, r3
 8000af4:	480c      	ldr	r0, [pc, #48]	; (8000b28 <MX_TIM3_Init+0x94>)
 8000af6:	f001 fee9 	bl	80028cc <HAL_TIM_ConfigClockSource>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b00:	f000 f928 	bl	8000d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b04:	2300      	movs	r3, #0
 8000b06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_TIM3_Init+0x94>)
 8000b12:	f002 fadb 	bl	80030cc <HAL_TIMEx_MasterConfigSynchronization>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000b1c:	f000 f91a 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000090 	.word	0x20000090
 8000b2c:	40000400 	.word	0x40000400

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 030c 	add.w	r3, r7, #12
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	4b30      	ldr	r3, [pc, #192]	; (8000c0c <MX_GPIO_Init+0xdc>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a2f      	ldr	r2, [pc, #188]	; (8000c0c <MX_GPIO_Init+0xdc>)
 8000b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <MX_GPIO_Init+0xdc>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <MX_GPIO_Init+0xdc>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a28      	ldr	r2, [pc, #160]	; (8000c0c <MX_GPIO_Init+0xdc>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <MX_GPIO_Init+0xdc>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <MX_GPIO_Init+0xdc>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <MX_GPIO_Init+0xdc>)
 8000b88:	f043 0310 	orr.w	r3, r3, #16
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <MX_GPIO_Init+0xdc>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0310 	and.w	r3, r3, #16
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor_Forward_Pin|Motor_Backward_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2103      	movs	r1, #3
 8000b9e:	481c      	ldr	r0, [pc, #112]	; (8000c10 <MX_GPIO_Init+0xe0>)
 8000ba0:	f000 fe5c 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Motor_Forward_Pin Motor_Backward_Pin */
  GPIO_InitStruct.Pin = Motor_Forward_Pin|Motor_Backward_Pin;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4815      	ldr	r0, [pc, #84]	; (8000c10 <MX_GPIO_Init+0xe0>)
 8000bbc:	f000 fc9a 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Phase_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Phase_A_Pin;
 8000bc0:	2308      	movs	r3, #8
 8000bc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Encoder_Phase_A_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480e      	ldr	r0, [pc, #56]	; (8000c10 <MX_GPIO_Init+0xe0>)
 8000bd6:	f000 fc8d 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Phase_B_Pin */
  GPIO_InitStruct.Pin = Encoder_Phase_B_Pin;
 8000bda:	2310      	movs	r3, #16
 8000bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Encoder_Phase_B_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	4619      	mov	r1, r3
 8000bec:	4808      	ldr	r0, [pc, #32]	; (8000c10 <MX_GPIO_Init+0xe0>)
 8000bee:	f000 fc81 	bl	80014f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2009      	movs	r0, #9
 8000bf8:	f000 fc45 	bl	8001486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000bfc:	2009      	movs	r0, #9
 8000bfe:	f000 fc5e 	bl	80014be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c02:	bf00      	nop
 8000c04:	3720      	adds	r7, #32
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020000 	.word	0x40020000

08000c14 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	80fb      	strh	r3, [r7, #6]
	Encoder_Update();
 8000c1e:	f7ff fc9f 	bl	8000560 <Encoder_Update>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM3)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a3e      	ldr	r2, [pc, #248]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d175      	bne.n	8000d2a <HAL_TIM_PeriodElapsedCallback+0xfe>
  {
    Encoder_CalculateSpeedAndAcceleration();
 8000c3e:	f7ff fcd3 	bl	80005e8 <Encoder_CalculateSpeedAndAcceleration>

    const int basePwm = 600;
 8000c42:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000c46:	60fb      	str	r3, [r7, #12]
    const int maxPwm = 1000;
 8000c48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4c:	60bb      	str	r3, [r7, #8]


    motorSpeed = Encoder_GetSpeed();
 8000c4e:	f7ff fd3d 	bl	80006cc <Encoder_GetSpeed>
 8000c52:	eef0 7a40 	vmov.f32	s15, s0
 8000c56:	4b38      	ldr	r3, [pc, #224]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000c58:	edc3 7a00 	vstr	s15, [r3]
    error = setSpeed - motorSpeed;
 8000c5c:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000c5e:	ed93 7a00 	vldr	s14, [r3]
 8000c62:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000c64:	edd3 7a00 	vldr	s15, [r3]
 8000c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c6c:	4b34      	ldr	r3, [pc, #208]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000c6e:	edc3 7a00 	vstr	s15, [r3]
    pidControl(&controller, error);
 8000c72:	4b33      	ldr	r3, [pc, #204]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000c74:	edd3 7a00 	vldr	s15, [r3]
 8000c78:	eeb0 0a67 	vmov.f32	s0, s15
 8000c7c:	4831      	ldr	r0, [pc, #196]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000c7e:	f000 f8aa 	bl	8000dd6 <pidControl>
    pwm = GetPidOutput(&controller);
 8000c82:	4830      	ldr	r0, [pc, #192]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000c84:	f000 f95a 	bl	8000f3c <GetPidOutput>
 8000c88:	eef0 7a40 	vmov.f32	s15, s0
 8000c8c:	4b2e      	ldr	r3, [pc, #184]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c8e:	edc3 7a00 	vstr	s15, [r3]
    if(Encoder_GetSpeed() < 100)
 8000c92:	f7ff fd1b 	bl	80006cc <Encoder_GetSpeed>
 8000c96:	eef0 7a40 	vmov.f32	s15, s0
 8000c9a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000d4c <HAL_TIM_PeriodElapsedCallback+0x120>
 8000c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca6:	d50b      	bpl.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x94>
    {
    	pwm = 600 + GetPidOutput(&controller);
 8000ca8:	4826      	ldr	r0, [pc, #152]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000caa:	f000 f947 	bl	8000f3c <GetPidOutput>
 8000cae:	eef0 7a40 	vmov.f32	s15, s0
 8000cb2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000d50 <HAL_TIM_PeriodElapsedCallback+0x124>
 8000cb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cba:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000cbc:	edc3 7a00 	vstr	s15, [r3]
    }

    if(pwm > maxPwm) pwm = maxPwm;
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	ee07 3a90 	vmov	s15, r3
 8000cc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000ccc:	edd3 7a00 	vldr	s15, [r3]
 8000cd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd8:	d507      	bpl.n	8000cea <HAL_TIM_PeriodElapsedCallback+0xbe>
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	ee07 3a90 	vmov	s15, r3
 8000ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ce4:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000ce6:	edc3 7a00 	vstr	s15, [r3]
    if(pwm < basePwm)  pwm = basePwm;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	ee07 3a90 	vmov	s15, r3
 8000cf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000cf6:	edd3 7a00 	vldr	s15, [r3]
 8000cfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d02:	dd07      	ble.n	8000d14 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	ee07 3a90 	vmov	s15, r3
 8000d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000d10:	edc3 7a00 	vstr	s15, [r3]
    Motor_SetPwmDutyCycle(pwm);
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000d16:	edd3 7a00 	vldr	s15, [r3]
 8000d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d1e:	ee17 3a90 	vmov	r3, s15
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fc9f 	bl	8000668 <Motor_SetPwmDutyCycle>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40000400 	.word	0x40000400
 8000d38:	20000130 	.word	0x20000130
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	20000120 	.word	0x20000120
 8000d44:	200000e0 	.word	0x200000e0
 8000d48:	20000124 	.word	0x20000124
 8000d4c:	42c80000 	.word	0x42c80000
 8000d50:	44160000 	.word	0x44160000

08000d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i
}
 8000d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <Error_Handler+0x8>

08000d5e <pidInit>:

	#include "pid_control.h"

	void pidInit(pid_param* controller, float kp, float ki, float kd, float ts, float iMaxLimit, float iMinLimit,
				 float dMaxLimit, float dMinLimit, float pidMaxLimit, float pidMinLimit)
	{
 8000d5e:	b480      	push	{r7}
 8000d60:	b08d      	sub	sp, #52	; 0x34
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000d66:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
 8000d6a:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8000d6e:	ed87 1a08 	vstr	s2, [r7, #32]
 8000d72:	edc7 1a07 	vstr	s3, [r7, #28]
 8000d76:	ed87 2a06 	vstr	s4, [r7, #24]
 8000d7a:	edc7 2a05 	vstr	s5, [r7, #20]
 8000d7e:	ed87 3a04 	vstr	s6, [r7, #16]
 8000d82:	edc7 3a03 	vstr	s7, [r7, #12]
 8000d86:	ed87 4a02 	vstr	s8, [r7, #8]
 8000d8a:	edc7 4a01 	vstr	s9, [r7, #4]
		controller->kp = kp;
 8000d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d92:	601a      	str	r2, [r3, #0]
		controller->ki = ki;
 8000d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d98:	605a      	str	r2, [r3, #4]
		controller->kd = kd;
 8000d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9c:	6a3a      	ldr	r2, [r7, #32]
 8000d9e:	609a      	str	r2, [r3, #8]
		controller->ts = ts;
 8000da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da2:	69fa      	ldr	r2, [r7, #28]
 8000da4:	60da      	str	r2, [r3, #12]

		controller->iMax = iMaxLimit;
 8000da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	619a      	str	r2, [r3, #24]
		controller->iMin = iMinLimit;
 8000dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	61da      	str	r2, [r3, #28]

		controller->dMax = dMaxLimit;
 8000db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	621a      	str	r2, [r3, #32]
		controller->dMin = dMinLimit;
 8000db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	625a      	str	r2, [r3, #36]	; 0x24

		controller->pidMax = pidMaxLimit;
 8000dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc0:	68ba      	ldr	r2, [r7, #8]
 8000dc2:	635a      	str	r2, [r3, #52]	; 0x34
		controller->pidMin = pidMinLimit;
 8000dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	639a      	str	r2, [r3, #56]	; 0x38
	}
 8000dca:	bf00      	nop
 8000dcc:	3734      	adds	r7, #52	; 0x34
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <pidControl>:

	}


	void pidControl(pid_param* controller, float error)
	{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	ed87 0a00 	vstr	s0, [r7]
		controller->error = error;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	611a      	str	r2, [r3, #16]

		controller->partP = controller->error ;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	691a      	ldr	r2, [r3, #16]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28

		controller->partI += controller->error * controller->ts;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	edd3 6a04 	vldr	s13, [r3, #16]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

		controller->partD = (controller->error - controller->lastError) / controller->ts;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	ed93 7a04 	vldr	s14, [r3, #16]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e1c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	ed93 7a03 	vldr	s14, [r3, #12]
 8000e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30


		if ( controller->partI > controller->iMax )
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e44:	dd04      	ble.n	8000e50 <pidControl+0x7a>
		{
			controller->partI = controller->iMax;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	699a      	ldr	r2, [r3, #24]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e4e:	e00e      	b.n	8000e6e <pidControl+0x98>
		}

		else if(controller->partI < controller->iMin)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	edd3 7a07 	vldr	s15, [r3, #28]
 8000e5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e64:	d503      	bpl.n	8000e6e <pidControl+0x98>
		{
			controller->partI = controller->iMin;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69da      	ldr	r2, [r3, #28]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	62da      	str	r2, [r3, #44]	; 0x2c
		else
		{

		}

		if(controller->partD > controller->dMax)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	edd3 7a08 	vldr	s15, [r3, #32]
 8000e7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e82:	dd04      	ble.n	8000e8e <pidControl+0xb8>
		{
			controller->partD = controller->dMax;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a1a      	ldr	r2, [r3, #32]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	631a      	str	r2, [r3, #48]	; 0x30
 8000e8c:	e00e      	b.n	8000eac <pidControl+0xd6>
		}

		else if(controller->partD < controller->dMin)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000e9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea2:	d503      	bpl.n	8000eac <pidControl+0xd6>
		{
			controller->partD = controller->dMin;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	631a      	str	r2, [r3, #48]	; 0x30
		{

		}


		controller->pidOutput = (controller->partP * controller->kp) +
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	edd3 7a00 	vldr	s15, [r3]
 8000eb8:	ee27 7a27 	vmul.f32	s14, s14, s15
								(controller->partI * controller->ki) +
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ec8:	ee66 7aa7 	vmul.f32	s15, s13, s15
		controller->pidOutput = (controller->partP * controller->kp) +
 8000ecc:	ee37 7a27 	vadd.f32	s14, s14, s15
								(controller->partD * controller->kd);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	edd3 7a02 	vldr	s15, [r3, #8]
 8000edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
								(controller->partI * controller->ki) +
 8000ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
		controller->pidOutput = (controller->partP * controller->kp) +
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c


		if(controller->pidOutput > controller->pidMax)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000efe:	dd04      	ble.n	8000f0a <pidControl+0x134>
		{
			controller->pidOutput = controller->pidMax;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f08:	e00e      	b.n	8000f28 <pidControl+0x152>
		}

		else if(controller->pidOutput < controller->pidMin)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8000f16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1e:	d503      	bpl.n	8000f28 <pidControl+0x152>
		{
			controller->pidOutput = controller->pidMin;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	63da      	str	r2, [r3, #60]	; 0x3c
		else
		{

		}

		controller->lastError = controller->error;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	615a      	str	r2, [r3, #20]

	}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <GetPidOutput>:


	float GetPidOutput(pid_param* controller)
	{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
		return(controller->pidOutput);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f48:	ee07 3a90 	vmov	s15, r3
	}
 8000f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a0f      	ldr	r2, [pc, #60]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_MspInit+0x4c>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800

08000fac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d10d      	bne.n	8000fda <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_TIM_PWM_MspInit+0x40>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a09      	ldr	r2, [pc, #36]	; (8000fec <HAL_TIM_PWM_MspInit+0x40>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <HAL_TIM_PWM_MspInit+0x40>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40010000 	.word	0x40010000
 8000fec:	40023800 	.word	0x40023800

08000ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0e      	ldr	r2, [pc, #56]	; (8001038 <HAL_TIM_Base_MspInit+0x48>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d115      	bne.n	800102e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <HAL_TIM_Base_MspInit+0x4c>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	4a0c      	ldr	r2, [pc, #48]	; (800103c <HAL_TIM_Base_MspInit+0x4c>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6413      	str	r3, [r2, #64]	; 0x40
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_TIM_Base_MspInit+0x4c>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	201d      	movs	r0, #29
 8001024:	f000 fa2f 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001028:	201d      	movs	r0, #29
 800102a:	f000 fa48 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40000400 	.word	0x40000400
 800103c:	40023800 	.word	0x40023800

08001040 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <HAL_TIM_MspPostInit+0x68>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d11e      	bne.n	80010a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <HAL_TIM_MspPostInit+0x6c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a10      	ldr	r2, [pc, #64]	; (80010ac <HAL_TIM_MspPostInit+0x6c>)
 800106c:	f043 0310 	orr.w	r3, r3, #16
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <HAL_TIM_MspPostInit+0x6c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Motor_PWM_Pin;
 800107e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001082:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001090:	2301      	movs	r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Motor_PWM_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	4619      	mov	r1, r3
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <HAL_TIM_MspPostInit+0x70>)
 800109c:	f000 fa2a 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40010000 	.word	0x40010000
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40021000 	.word	0x40021000

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <NMI_Handler+0x4>

080010ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <MemManage_Handler+0x4>

080010c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001100:	f000 f8a2 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}

08001108 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Phase_A_Pin);
 800110c:	2008      	movs	r0, #8
 800110e:	f000 fbbf 	bl	8001890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <TIM3_IRQHandler+0x10>)
 800111e:	f001 fa0b 	bl	8002538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000090 	.word	0x20000090

0800112c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <SystemInit+0x20>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <SystemInit+0x20>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001188 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001156:	490e      	ldr	r1, [pc, #56]	; (8001190 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001158:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800116c:	4c0b      	ldr	r4, [pc, #44]	; (800119c <LoopFillZerobss+0x26>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800117a:	f7ff ffd7 	bl	800112c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117e:	f002 f88f 	bl	80032a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001182:	f7ff fb1b 	bl	80007bc <main>
  bx  lr    
 8001186:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001188:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001194:	08003320 	.word	0x08003320
  ldr r2, =_sbss
 8001198:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800119c:	2000013c 	.word	0x2000013c

080011a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC_IRQHandler>
	...

080011a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <HAL_Init+0x40>)
 80011ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <HAL_Init+0x40>)
 80011ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <HAL_Init+0x40>)
 80011c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011cc:	2003      	movs	r0, #3
 80011ce:	f000 f94f 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d2:	200f      	movs	r0, #15
 80011d4:	f000 f808 	bl	80011e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d8:	f7ff fec0 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023c00 	.word	0x40023c00

080011e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_InitTick+0x54>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_InitTick+0x58>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001202:	fbb2 f3f3 	udiv	r3, r2, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f967 	bl	80014da <HAL_SYSTICK_Config>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e00e      	b.n	8001234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d80a      	bhi.n	8001232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f000 f92f 	bl	8001486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001228:	4a06      	ldr	r2, [pc, #24]	; (8001244 <HAL_InitTick+0x5c>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e000      	b.n	8001234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000004 	.word	0x20000004
 8001240:	2000000c 	.word	0x2000000c
 8001244:	20000008 	.word	0x20000008

08001248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x20>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x24>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_IncTick+0x24>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	2000000c 	.word	0x2000000c
 800126c:	20000138 	.word	0x20000138

08001270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <HAL_GetTick+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000138 	.word	0x20000138

08001288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001290:	f7ff ffee 	bl	8001270 <HAL_GetTick>
 8001294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a0:	d005      	beq.n	80012ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_Delay+0x44>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ae:	bf00      	nop
 80012b0:	f7ff ffde 	bl	8001270 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d8f7      	bhi.n	80012b0 <HAL_Delay+0x28>
  {
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000000c 	.word	0x2000000c

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0b      	blt.n	800135e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4907      	ldr	r1, [pc, #28]	; (800136c <__NVIC_EnableIRQ+0x38>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f7ff ff8e 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff29 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001498:	f7ff ff3e 	bl	8001318 <__NVIC_GetPriorityGrouping>
 800149c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f7ff ff8e 	bl	80013c4 <NVIC_EncodePriority>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff5d 	bl	8001370 <__NVIC_SetPriority>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff31 	bl	8001334 <__NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffa2 	bl	800142c <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
 800150e:	e16b      	b.n	80017e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001510:	2201      	movs	r2, #1
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	429a      	cmp	r2, r3
 800152a:	f040 815a 	bne.w	80017e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b01      	cmp	r3, #1
 8001538:	d005      	beq.n	8001546 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001542:	2b02      	cmp	r3, #2
 8001544:	d130      	bne.n	80015a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800157c:	2201      	movs	r2, #1
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	f003 0201 	and.w	r2, r3, #1
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d017      	beq.n	80015e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	2203      	movs	r2, #3
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d123      	bne.n	8001638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	08da      	lsrs	r2, r3, #3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3208      	adds	r2, #8
 80015f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	220f      	movs	r2, #15
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	08da      	lsrs	r2, r3, #3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3208      	adds	r2, #8
 8001632:	69b9      	ldr	r1, [r7, #24]
 8001634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2203      	movs	r2, #3
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0203 	and.w	r2, r3, #3
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80b4 	beq.w	80017e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b60      	ldr	r3, [pc, #384]	; (8001800 <HAL_GPIO_Init+0x30c>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	4a5f      	ldr	r2, [pc, #380]	; (8001800 <HAL_GPIO_Init+0x30c>)
 8001684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001688:	6453      	str	r3, [r2, #68]	; 0x44
 800168a:	4b5d      	ldr	r3, [pc, #372]	; (8001800 <HAL_GPIO_Init+0x30c>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001696:	4a5b      	ldr	r2, [pc, #364]	; (8001804 <HAL_GPIO_Init+0x310>)
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	3302      	adds	r3, #2
 800169e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	220f      	movs	r2, #15
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a52      	ldr	r2, [pc, #328]	; (8001808 <HAL_GPIO_Init+0x314>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d02b      	beq.n	800171a <HAL_GPIO_Init+0x226>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a51      	ldr	r2, [pc, #324]	; (800180c <HAL_GPIO_Init+0x318>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d025      	beq.n	8001716 <HAL_GPIO_Init+0x222>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a50      	ldr	r2, [pc, #320]	; (8001810 <HAL_GPIO_Init+0x31c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d01f      	beq.n	8001712 <HAL_GPIO_Init+0x21e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4f      	ldr	r2, [pc, #316]	; (8001814 <HAL_GPIO_Init+0x320>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d019      	beq.n	800170e <HAL_GPIO_Init+0x21a>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4e      	ldr	r2, [pc, #312]	; (8001818 <HAL_GPIO_Init+0x324>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d013      	beq.n	800170a <HAL_GPIO_Init+0x216>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4d      	ldr	r2, [pc, #308]	; (800181c <HAL_GPIO_Init+0x328>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00d      	beq.n	8001706 <HAL_GPIO_Init+0x212>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4c      	ldr	r2, [pc, #304]	; (8001820 <HAL_GPIO_Init+0x32c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d007      	beq.n	8001702 <HAL_GPIO_Init+0x20e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4b      	ldr	r2, [pc, #300]	; (8001824 <HAL_GPIO_Init+0x330>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d101      	bne.n	80016fe <HAL_GPIO_Init+0x20a>
 80016fa:	2307      	movs	r3, #7
 80016fc:	e00e      	b.n	800171c <HAL_GPIO_Init+0x228>
 80016fe:	2308      	movs	r3, #8
 8001700:	e00c      	b.n	800171c <HAL_GPIO_Init+0x228>
 8001702:	2306      	movs	r3, #6
 8001704:	e00a      	b.n	800171c <HAL_GPIO_Init+0x228>
 8001706:	2305      	movs	r3, #5
 8001708:	e008      	b.n	800171c <HAL_GPIO_Init+0x228>
 800170a:	2304      	movs	r3, #4
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x228>
 800170e:	2303      	movs	r3, #3
 8001710:	e004      	b.n	800171c <HAL_GPIO_Init+0x228>
 8001712:	2302      	movs	r3, #2
 8001714:	e002      	b.n	800171c <HAL_GPIO_Init+0x228>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <HAL_GPIO_Init+0x228>
 800171a:	2300      	movs	r3, #0
 800171c:	69fa      	ldr	r2, [r7, #28]
 800171e:	f002 0203 	and.w	r2, r2, #3
 8001722:	0092      	lsls	r2, r2, #2
 8001724:	4093      	lsls	r3, r2
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800172c:	4935      	ldr	r1, [pc, #212]	; (8001804 <HAL_GPIO_Init+0x310>)
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	3302      	adds	r3, #2
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800173a:	4b3b      	ldr	r3, [pc, #236]	; (8001828 <HAL_GPIO_Init+0x334>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800175e:	4a32      	ldr	r2, [pc, #200]	; (8001828 <HAL_GPIO_Init+0x334>)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001764:	4b30      	ldr	r3, [pc, #192]	; (8001828 <HAL_GPIO_Init+0x334>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001788:	4a27      	ldr	r2, [pc, #156]	; (8001828 <HAL_GPIO_Init+0x334>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800178e:	4b26      	ldr	r3, [pc, #152]	; (8001828 <HAL_GPIO_Init+0x334>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017b2:	4a1d      	ldr	r2, [pc, #116]	; (8001828 <HAL_GPIO_Init+0x334>)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_GPIO_Init+0x334>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017dc:	4a12      	ldr	r2, [pc, #72]	; (8001828 <HAL_GPIO_Init+0x334>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3301      	adds	r3, #1
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	2b0f      	cmp	r3, #15
 80017ec:	f67f ae90 	bls.w	8001510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	40013800 	.word	0x40013800
 8001808:	40020000 	.word	0x40020000
 800180c:	40020400 	.word	0x40020400
 8001810:	40020800 	.word	0x40020800
 8001814:	40020c00 	.word	0x40020c00
 8001818:	40021000 	.word	0x40021000
 800181c:	40021400 	.word	0x40021400
 8001820:	40021800 	.word	0x40021800
 8001824:	40021c00 	.word	0x40021c00
 8001828:	40013c00 	.word	0x40013c00

0800182c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	887b      	ldrh	r3, [r7, #2]
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d002      	beq.n	800184a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
 8001848:	e001      	b.n	800184e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800184a:	2300      	movs	r3, #0
 800184c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800184e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
 8001868:	4613      	mov	r3, r2
 800186a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800186c:	787b      	ldrb	r3, [r7, #1]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001878:	e003      	b.n	8001882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187a:	887b      	ldrh	r3, [r7, #2]
 800187c:	041a      	lsls	r2, r3, #16
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	619a      	str	r2, [r3, #24]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff f9b0 	bl	8000c14 <HAL_GPIO_EXTI_Callback>
  }
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40013c00 	.word	0x40013c00

080018c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e267      	b.n	8001da2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d075      	beq.n	80019ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018de:	4b88      	ldr	r3, [pc, #544]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d00c      	beq.n	8001904 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ea:	4b85      	ldr	r3, [pc, #532]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d112      	bne.n	800191c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f6:	4b82      	ldr	r3, [pc, #520]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001902:	d10b      	bne.n	800191c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001904:	4b7e      	ldr	r3, [pc, #504]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d05b      	beq.n	80019c8 <HAL_RCC_OscConfig+0x108>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d157      	bne.n	80019c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e242      	b.n	8001da2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001924:	d106      	bne.n	8001934 <HAL_RCC_OscConfig+0x74>
 8001926:	4b76      	ldr	r3, [pc, #472]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a75      	ldr	r2, [pc, #468]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 800192c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e01d      	b.n	8001970 <HAL_RCC_OscConfig+0xb0>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x98>
 800193e:	4b70      	ldr	r3, [pc, #448]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a6f      	ldr	r2, [pc, #444]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 8001944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b6d      	ldr	r3, [pc, #436]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a6c      	ldr	r2, [pc, #432]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 8001950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e00b      	b.n	8001970 <HAL_RCC_OscConfig+0xb0>
 8001958:	4b69      	ldr	r3, [pc, #420]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a68      	ldr	r2, [pc, #416]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 800195e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b66      	ldr	r3, [pc, #408]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a65      	ldr	r2, [pc, #404]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 800196a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800196e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d013      	beq.n	80019a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff fc7a 	bl	8001270 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff fc76 	bl	8001270 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e207      	b.n	8001da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	4b5b      	ldr	r3, [pc, #364]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0xc0>
 800199e:	e014      	b.n	80019ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a0:	f7ff fc66 	bl	8001270 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a8:	f7ff fc62 	bl	8001270 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	; 0x64
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e1f3      	b.n	8001da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ba:	4b51      	ldr	r3, [pc, #324]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0xe8>
 80019c6:	e000      	b.n	80019ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d063      	beq.n	8001a9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019d6:	4b4a      	ldr	r3, [pc, #296]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 030c 	and.w	r3, r3, #12
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00b      	beq.n	80019fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019e2:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d11c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ee:	4b44      	ldr	r3, [pc, #272]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d116      	bne.n	8001a28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fa:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d005      	beq.n	8001a12 <HAL_RCC_OscConfig+0x152>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d001      	beq.n	8001a12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e1c7      	b.n	8001da2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a12:	4b3b      	ldr	r3, [pc, #236]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4937      	ldr	r1, [pc, #220]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a26:	e03a      	b.n	8001a9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d020      	beq.n	8001a72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a30:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <HAL_RCC_OscConfig+0x244>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a36:	f7ff fc1b 	bl	8001270 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3e:	f7ff fc17 	bl	8001270 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e1a8      	b.n	8001da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a50:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5c:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4925      	ldr	r1, [pc, #148]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]
 8001a70:	e015      	b.n	8001a9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a72:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <HAL_RCC_OscConfig+0x244>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff fbfa 	bl	8001270 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a80:	f7ff fbf6 	bl	8001270 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e187      	b.n	8001da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a92:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d036      	beq.n	8001b18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d016      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <HAL_RCC_OscConfig+0x248>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab8:	f7ff fbda 	bl	8001270 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac0:	f7ff fbd6 	bl	8001270 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e167      	b.n	8001da2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x200>
 8001ade:	e01b      	b.n	8001b18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <HAL_RCC_OscConfig+0x248>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff fbc3 	bl	8001270 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aec:	e00e      	b.n	8001b0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aee:	f7ff fbbf 	bl	8001270 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d907      	bls.n	8001b0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e150      	b.n	8001da2 <HAL_RCC_OscConfig+0x4e2>
 8001b00:	40023800 	.word	0x40023800
 8001b04:	42470000 	.word	0x42470000
 8001b08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0c:	4b88      	ldr	r3, [pc, #544]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1ea      	bne.n	8001aee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 8097 	beq.w	8001c54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2a:	4b81      	ldr	r3, [pc, #516]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10f      	bne.n	8001b56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	4b7d      	ldr	r3, [pc, #500]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a7c      	ldr	r2, [pc, #496]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b7a      	ldr	r3, [pc, #488]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b52:	2301      	movs	r3, #1
 8001b54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b56:	4b77      	ldr	r3, [pc, #476]	; (8001d34 <HAL_RCC_OscConfig+0x474>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d118      	bne.n	8001b94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b62:	4b74      	ldr	r3, [pc, #464]	; (8001d34 <HAL_RCC_OscConfig+0x474>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a73      	ldr	r2, [pc, #460]	; (8001d34 <HAL_RCC_OscConfig+0x474>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fb7f 	bl	8001270 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b76:	f7ff fb7b 	bl	8001270 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e10c      	b.n	8001da2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b88:	4b6a      	ldr	r3, [pc, #424]	; (8001d34 <HAL_RCC_OscConfig+0x474>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f0      	beq.n	8001b76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d106      	bne.n	8001baa <HAL_RCC_OscConfig+0x2ea>
 8001b9c:	4b64      	ldr	r3, [pc, #400]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba0:	4a63      	ldr	r2, [pc, #396]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba8:	e01c      	b.n	8001be4 <HAL_RCC_OscConfig+0x324>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b05      	cmp	r3, #5
 8001bb0:	d10c      	bne.n	8001bcc <HAL_RCC_OscConfig+0x30c>
 8001bb2:	4b5f      	ldr	r3, [pc, #380]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	4a5e      	ldr	r2, [pc, #376]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bbe:	4b5c      	ldr	r3, [pc, #368]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc2:	4a5b      	ldr	r2, [pc, #364]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bca:	e00b      	b.n	8001be4 <HAL_RCC_OscConfig+0x324>
 8001bcc:	4b58      	ldr	r3, [pc, #352]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd0:	4a57      	ldr	r2, [pc, #348]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001bd2:	f023 0301 	bic.w	r3, r3, #1
 8001bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd8:	4b55      	ldr	r3, [pc, #340]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bdc:	4a54      	ldr	r2, [pc, #336]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001bde:	f023 0304 	bic.w	r3, r3, #4
 8001be2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d015      	beq.n	8001c18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bec:	f7ff fb40 	bl	8001270 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf4:	f7ff fb3c 	bl	8001270 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e0cb      	b.n	8001da2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0a:	4b49      	ldr	r3, [pc, #292]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0ee      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x334>
 8001c16:	e014      	b.n	8001c42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c18:	f7ff fb2a 	bl	8001270 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c1e:	e00a      	b.n	8001c36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c20:	f7ff fb26 	bl	8001270 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e0b5      	b.n	8001da2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c36:	4b3e      	ldr	r3, [pc, #248]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1ee      	bne.n	8001c20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c42:	7dfb      	ldrb	r3, [r7, #23]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d105      	bne.n	8001c54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c48:	4b39      	ldr	r3, [pc, #228]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	4a38      	ldr	r2, [pc, #224]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 80a1 	beq.w	8001da0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c5e:	4b34      	ldr	r3, [pc, #208]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d05c      	beq.n	8001d24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d141      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c72:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <HAL_RCC_OscConfig+0x478>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fafa 	bl	8001270 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c80:	f7ff faf6 	bl	8001270 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e087      	b.n	8001da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c92:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69da      	ldr	r2, [r3, #28]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	019b      	lsls	r3, r3, #6
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	085b      	lsrs	r3, r3, #1
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	041b      	lsls	r3, r3, #16
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	061b      	lsls	r3, r3, #24
 8001cc2:	491b      	ldr	r1, [pc, #108]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_RCC_OscConfig+0x478>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cce:	f7ff facf 	bl	8001270 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7ff facb 	bl	8001270 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e05c      	b.n	8001da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x416>
 8001cf4:	e054      	b.n	8001da0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <HAL_RCC_OscConfig+0x478>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fab8 	bl	8001270 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d04:	f7ff fab4 	bl	8001270 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e045      	b.n	8001da2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_RCC_OscConfig+0x470>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x444>
 8001d22:	e03d      	b.n	8001da0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d107      	bne.n	8001d3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e038      	b.n	8001da2 <HAL_RCC_OscConfig+0x4e2>
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40007000 	.word	0x40007000
 8001d38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_RCC_OscConfig+0x4ec>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d028      	beq.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d121      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d11a      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d111      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	085b      	lsrs	r3, r3, #1
 8001d84:	3b01      	subs	r3, #1
 8001d86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d107      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800

08001db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0cc      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc4:	4b68      	ldr	r3, [pc, #416]	; (8001f68 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d90c      	bls.n	8001dec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd2:	4b65      	ldr	r3, [pc, #404]	; (8001f68 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dda:	4b63      	ldr	r3, [pc, #396]	; (8001f68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d001      	beq.n	8001dec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0b8      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d020      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e04:	4b59      	ldr	r3, [pc, #356]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	4a58      	ldr	r2, [pc, #352]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e1c:	4b53      	ldr	r3, [pc, #332]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4a52      	ldr	r2, [pc, #328]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e28:	4b50      	ldr	r3, [pc, #320]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	494d      	ldr	r1, [pc, #308]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d044      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d107      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4e:	4b47      	ldr	r3, [pc, #284]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d119      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e07f      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d003      	beq.n	8001e6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d107      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6e:	4b3f      	ldr	r3, [pc, #252]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d109      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e06f      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7e:	4b3b      	ldr	r3, [pc, #236]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e067      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e8e:	4b37      	ldr	r3, [pc, #220]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f023 0203 	bic.w	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	4934      	ldr	r1, [pc, #208]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea0:	f7ff f9e6 	bl	8001270 <HAL_GetTick>
 8001ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea6:	e00a      	b.n	8001ebe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea8:	f7ff f9e2 	bl	8001270 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e04f      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ebe:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 020c 	and.w	r2, r3, #12
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d1eb      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed0:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d20c      	bcs.n	8001ef8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ede:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee6:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e032      	b.n	8001f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	4916      	ldr	r1, [pc, #88]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d009      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	490e      	ldr	r1, [pc, #56]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f36:	f000 f821 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	490a      	ldr	r1, [pc, #40]	; (8001f70 <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	5ccb      	ldrb	r3, [r1, r3]
 8001f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4e:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <HAL_RCC_ClockConfig+0x1c4>)
 8001f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <HAL_RCC_ClockConfig+0x1c8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff f946 	bl	80011e8 <HAL_InitTick>

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40023c00 	.word	0x40023c00
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	08003300 	.word	0x08003300
 8001f74:	20000004 	.word	0x20000004
 8001f78:	20000008 	.word	0x20000008

08001f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f80:	b094      	sub	sp, #80	; 0x50
 8001f82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	647b      	str	r3, [r7, #68]	; 0x44
 8001f88:	2300      	movs	r3, #0
 8001f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f94:	4b79      	ldr	r3, [pc, #484]	; (800217c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d00d      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x40>
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	f200 80e1 	bhi.w	8002168 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d003      	beq.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001fae:	e0db      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fb0:	4b73      	ldr	r3, [pc, #460]	; (8002180 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fb2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001fb4:	e0db      	b.n	800216e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fb6:	4b73      	ldr	r3, [pc, #460]	; (8002184 <HAL_RCC_GetSysClockFreq+0x208>)
 8001fb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fba:	e0d8      	b.n	800216e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fbc:	4b6f      	ldr	r3, [pc, #444]	; (800217c <HAL_RCC_GetSysClockFreq+0x200>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fc4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fc6:	4b6d      	ldr	r3, [pc, #436]	; (800217c <HAL_RCC_GetSysClockFreq+0x200>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d063      	beq.n	800209a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd2:	4b6a      	ldr	r3, [pc, #424]	; (800217c <HAL_RCC_GetSysClockFreq+0x200>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	099b      	lsrs	r3, r3, #6
 8001fd8:	2200      	movs	r2, #0
 8001fda:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fdc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fe4:	633b      	str	r3, [r7, #48]	; 0x30
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8001fea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001fee:	4622      	mov	r2, r4
 8001ff0:	462b      	mov	r3, r5
 8001ff2:	f04f 0000 	mov.w	r0, #0
 8001ff6:	f04f 0100 	mov.w	r1, #0
 8001ffa:	0159      	lsls	r1, r3, #5
 8001ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002000:	0150      	lsls	r0, r2, #5
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4621      	mov	r1, r4
 8002008:	1a51      	subs	r1, r2, r1
 800200a:	6139      	str	r1, [r7, #16]
 800200c:	4629      	mov	r1, r5
 800200e:	eb63 0301 	sbc.w	r3, r3, r1
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002020:	4659      	mov	r1, fp
 8002022:	018b      	lsls	r3, r1, #6
 8002024:	4651      	mov	r1, sl
 8002026:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800202a:	4651      	mov	r1, sl
 800202c:	018a      	lsls	r2, r1, #6
 800202e:	4651      	mov	r1, sl
 8002030:	ebb2 0801 	subs.w	r8, r2, r1
 8002034:	4659      	mov	r1, fp
 8002036:	eb63 0901 	sbc.w	r9, r3, r1
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002046:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800204a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800204e:	4690      	mov	r8, r2
 8002050:	4699      	mov	r9, r3
 8002052:	4623      	mov	r3, r4
 8002054:	eb18 0303 	adds.w	r3, r8, r3
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	462b      	mov	r3, r5
 800205c:	eb49 0303 	adc.w	r3, r9, r3
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800206e:	4629      	mov	r1, r5
 8002070:	024b      	lsls	r3, r1, #9
 8002072:	4621      	mov	r1, r4
 8002074:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002078:	4621      	mov	r1, r4
 800207a:	024a      	lsls	r2, r1, #9
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002082:	2200      	movs	r2, #0
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
 8002086:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002088:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800208c:	f7fe f89c 	bl	80001c8 <__aeabi_uldivmod>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4613      	mov	r3, r2
 8002096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002098:	e058      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209a:	4b38      	ldr	r3, [pc, #224]	; (800217c <HAL_RCC_GetSysClockFreq+0x200>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	099b      	lsrs	r3, r3, #6
 80020a0:	2200      	movs	r2, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	4611      	mov	r1, r2
 80020a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020aa:	623b      	str	r3, [r7, #32]
 80020ac:	2300      	movs	r3, #0
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
 80020b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020b4:	4642      	mov	r2, r8
 80020b6:	464b      	mov	r3, r9
 80020b8:	f04f 0000 	mov.w	r0, #0
 80020bc:	f04f 0100 	mov.w	r1, #0
 80020c0:	0159      	lsls	r1, r3, #5
 80020c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020c6:	0150      	lsls	r0, r2, #5
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4641      	mov	r1, r8
 80020ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80020d2:	4649      	mov	r1, r9
 80020d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020ec:	ebb2 040a 	subs.w	r4, r2, sl
 80020f0:	eb63 050b 	sbc.w	r5, r3, fp
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	f04f 0300 	mov.w	r3, #0
 80020fc:	00eb      	lsls	r3, r5, #3
 80020fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002102:	00e2      	lsls	r2, r4, #3
 8002104:	4614      	mov	r4, r2
 8002106:	461d      	mov	r5, r3
 8002108:	4643      	mov	r3, r8
 800210a:	18e3      	adds	r3, r4, r3
 800210c:	603b      	str	r3, [r7, #0]
 800210e:	464b      	mov	r3, r9
 8002110:	eb45 0303 	adc.w	r3, r5, r3
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002122:	4629      	mov	r1, r5
 8002124:	028b      	lsls	r3, r1, #10
 8002126:	4621      	mov	r1, r4
 8002128:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800212c:	4621      	mov	r1, r4
 800212e:	028a      	lsls	r2, r1, #10
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002136:	2200      	movs	r2, #0
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	61fa      	str	r2, [r7, #28]
 800213c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002140:	f7fe f842 	bl	80001c8 <__aeabi_uldivmod>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4613      	mov	r3, r2
 800214a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_RCC_GetSysClockFreq+0x200>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	0c1b      	lsrs	r3, r3, #16
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	3301      	adds	r3, #1
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800215c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800215e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002160:	fbb2 f3f3 	udiv	r3, r2, r3
 8002164:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002166:	e002      	b.n	800216e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_RCC_GetSysClockFreq+0x204>)
 800216a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800216c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800216e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002170:	4618      	mov	r0, r3
 8002172:	3750      	adds	r7, #80	; 0x50
 8002174:	46bd      	mov	sp, r7
 8002176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800
 8002180:	00f42400 	.word	0x00f42400
 8002184:	007a1200 	.word	0x007a1200

08002188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e041      	b.n	800221e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7fe ff1e 	bl	8000ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3304      	adds	r3, #4
 80021c4:	4619      	mov	r1, r3
 80021c6:	4610      	mov	r0, r2
 80021c8:	f000 fc70 	bl	8002aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d001      	beq.n	8002240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e04e      	b.n	80022de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a23      	ldr	r2, [pc, #140]	; (80022ec <HAL_TIM_Base_Start_IT+0xc4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d022      	beq.n	80022a8 <HAL_TIM_Base_Start_IT+0x80>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800226a:	d01d      	beq.n	80022a8 <HAL_TIM_Base_Start_IT+0x80>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1f      	ldr	r2, [pc, #124]	; (80022f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d018      	beq.n	80022a8 <HAL_TIM_Base_Start_IT+0x80>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1e      	ldr	r2, [pc, #120]	; (80022f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d013      	beq.n	80022a8 <HAL_TIM_Base_Start_IT+0x80>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a1c      	ldr	r2, [pc, #112]	; (80022f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00e      	beq.n	80022a8 <HAL_TIM_Base_Start_IT+0x80>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a1b      	ldr	r2, [pc, #108]	; (80022fc <HAL_TIM_Base_Start_IT+0xd4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d009      	beq.n	80022a8 <HAL_TIM_Base_Start_IT+0x80>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a19      	ldr	r2, [pc, #100]	; (8002300 <HAL_TIM_Base_Start_IT+0xd8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d004      	beq.n	80022a8 <HAL_TIM_Base_Start_IT+0x80>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a18      	ldr	r2, [pc, #96]	; (8002304 <HAL_TIM_Base_Start_IT+0xdc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d111      	bne.n	80022cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	d010      	beq.n	80022dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0201 	orr.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ca:	e007      	b.n	80022dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40010000 	.word	0x40010000
 80022f0:	40000400 	.word	0x40000400
 80022f4:	40000800 	.word	0x40000800
 80022f8:	40000c00 	.word	0x40000c00
 80022fc:	40010400 	.word	0x40010400
 8002300:	40014000 	.word	0x40014000
 8002304:	40001800 	.word	0x40001800

08002308 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e041      	b.n	800239e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7fe fe3c 	bl	8000fac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3304      	adds	r3, #4
 8002344:	4619      	mov	r1, r3
 8002346:	4610      	mov	r0, r2
 8002348:	f000 fbb0 	bl	8002aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d109      	bne.n	80023cc <HAL_TIM_PWM_Start+0x24>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	bf14      	ite	ne
 80023c4:	2301      	movne	r3, #1
 80023c6:	2300      	moveq	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	e022      	b.n	8002412 <HAL_TIM_PWM_Start+0x6a>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d109      	bne.n	80023e6 <HAL_TIM_PWM_Start+0x3e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b01      	cmp	r3, #1
 80023dc:	bf14      	ite	ne
 80023de:	2301      	movne	r3, #1
 80023e0:	2300      	moveq	r3, #0
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	e015      	b.n	8002412 <HAL_TIM_PWM_Start+0x6a>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d109      	bne.n	8002400 <HAL_TIM_PWM_Start+0x58>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	bf14      	ite	ne
 80023f8:	2301      	movne	r3, #1
 80023fa:	2300      	moveq	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e008      	b.n	8002412 <HAL_TIM_PWM_Start+0x6a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b01      	cmp	r3, #1
 800240a:	bf14      	ite	ne
 800240c:	2301      	movne	r3, #1
 800240e:	2300      	moveq	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e07c      	b.n	8002514 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d104      	bne.n	800242a <HAL_TIM_PWM_Start+0x82>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002428:	e013      	b.n	8002452 <HAL_TIM_PWM_Start+0xaa>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b04      	cmp	r3, #4
 800242e:	d104      	bne.n	800243a <HAL_TIM_PWM_Start+0x92>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002438:	e00b      	b.n	8002452 <HAL_TIM_PWM_Start+0xaa>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b08      	cmp	r3, #8
 800243e:	d104      	bne.n	800244a <HAL_TIM_PWM_Start+0xa2>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002448:	e003      	b.n	8002452 <HAL_TIM_PWM_Start+0xaa>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2202      	movs	r2, #2
 800244e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2201      	movs	r2, #1
 8002458:	6839      	ldr	r1, [r7, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f000 fe10 	bl	8003080 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a2d      	ldr	r2, [pc, #180]	; (800251c <HAL_TIM_PWM_Start+0x174>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d004      	beq.n	8002474 <HAL_TIM_PWM_Start+0xcc>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a2c      	ldr	r2, [pc, #176]	; (8002520 <HAL_TIM_PWM_Start+0x178>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d101      	bne.n	8002478 <HAL_TIM_PWM_Start+0xd0>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <HAL_TIM_PWM_Start+0xd2>
 8002478:	2300      	movs	r3, #0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800248c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a22      	ldr	r2, [pc, #136]	; (800251c <HAL_TIM_PWM_Start+0x174>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d022      	beq.n	80024de <HAL_TIM_PWM_Start+0x136>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a0:	d01d      	beq.n	80024de <HAL_TIM_PWM_Start+0x136>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1f      	ldr	r2, [pc, #124]	; (8002524 <HAL_TIM_PWM_Start+0x17c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d018      	beq.n	80024de <HAL_TIM_PWM_Start+0x136>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a1d      	ldr	r2, [pc, #116]	; (8002528 <HAL_TIM_PWM_Start+0x180>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d013      	beq.n	80024de <HAL_TIM_PWM_Start+0x136>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a1c      	ldr	r2, [pc, #112]	; (800252c <HAL_TIM_PWM_Start+0x184>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d00e      	beq.n	80024de <HAL_TIM_PWM_Start+0x136>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a16      	ldr	r2, [pc, #88]	; (8002520 <HAL_TIM_PWM_Start+0x178>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d009      	beq.n	80024de <HAL_TIM_PWM_Start+0x136>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a18      	ldr	r2, [pc, #96]	; (8002530 <HAL_TIM_PWM_Start+0x188>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d004      	beq.n	80024de <HAL_TIM_PWM_Start+0x136>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a16      	ldr	r2, [pc, #88]	; (8002534 <HAL_TIM_PWM_Start+0x18c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d111      	bne.n	8002502 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b06      	cmp	r3, #6
 80024ee:	d010      	beq.n	8002512 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002500:	e007      	b.n	8002512 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40010000 	.word	0x40010000
 8002520:	40010400 	.word	0x40010400
 8002524:	40000400 	.word	0x40000400
 8002528:	40000800 	.word	0x40000800
 800252c:	40000c00 	.word	0x40000c00
 8002530:	40014000 	.word	0x40014000
 8002534:	40001800 	.word	0x40001800

08002538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b02      	cmp	r3, #2
 800254c:	d122      	bne.n	8002594 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b02      	cmp	r3, #2
 800255a:	d11b      	bne.n	8002594 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0202 	mvn.w	r2, #2
 8002564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 fa77 	bl	8002a6e <HAL_TIM_IC_CaptureCallback>
 8002580:	e005      	b.n	800258e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 fa69 	bl	8002a5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fa7a 	bl	8002a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d122      	bne.n	80025e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d11b      	bne.n	80025e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0204 	mvn.w	r2, #4
 80025b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2202      	movs	r2, #2
 80025be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fa4d 	bl	8002a6e <HAL_TIM_IC_CaptureCallback>
 80025d4:	e005      	b.n	80025e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 fa3f 	bl	8002a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 fa50 	bl	8002a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d122      	bne.n	800263c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b08      	cmp	r3, #8
 8002602:	d11b      	bne.n	800263c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0208 	mvn.w	r2, #8
 800260c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2204      	movs	r2, #4
 8002612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 fa23 	bl	8002a6e <HAL_TIM_IC_CaptureCallback>
 8002628:	e005      	b.n	8002636 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 fa15 	bl	8002a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 fa26 	bl	8002a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	2b10      	cmp	r3, #16
 8002648:	d122      	bne.n	8002690 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	2b10      	cmp	r3, #16
 8002656:	d11b      	bne.n	8002690 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0210 	mvn.w	r2, #16
 8002660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2208      	movs	r2, #8
 8002666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f9f9 	bl	8002a6e <HAL_TIM_IC_CaptureCallback>
 800267c:	e005      	b.n	800268a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f9eb 	bl	8002a5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f9fc 	bl	8002a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b01      	cmp	r3, #1
 800269c:	d10e      	bne.n	80026bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d107      	bne.n	80026bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0201 	mvn.w	r2, #1
 80026b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe fab8 	bl	8000c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c6:	2b80      	cmp	r3, #128	; 0x80
 80026c8:	d10e      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d4:	2b80      	cmp	r3, #128	; 0x80
 80026d6:	d107      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fdca 	bl	800327c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f2:	2b40      	cmp	r3, #64	; 0x40
 80026f4:	d10e      	bne.n	8002714 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002700:	2b40      	cmp	r3, #64	; 0x40
 8002702:	d107      	bne.n	8002714 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800270c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f9c1 	bl	8002a96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b20      	cmp	r3, #32
 8002720:	d10e      	bne.n	8002740 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	2b20      	cmp	r3, #32
 800272e:	d107      	bne.n	8002740 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f06f 0220 	mvn.w	r2, #32
 8002738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fd94 	bl	8003268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002762:	2302      	movs	r3, #2
 8002764:	e0ae      	b.n	80028c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b0c      	cmp	r3, #12
 8002772:	f200 809f 	bhi.w	80028b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002776:	a201      	add	r2, pc, #4	; (adr r2, 800277c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277c:	080027b1 	.word	0x080027b1
 8002780:	080028b5 	.word	0x080028b5
 8002784:	080028b5 	.word	0x080028b5
 8002788:	080028b5 	.word	0x080028b5
 800278c:	080027f1 	.word	0x080027f1
 8002790:	080028b5 	.word	0x080028b5
 8002794:	080028b5 	.word	0x080028b5
 8002798:	080028b5 	.word	0x080028b5
 800279c:	08002833 	.word	0x08002833
 80027a0:	080028b5 	.word	0x080028b5
 80027a4:	080028b5 	.word	0x080028b5
 80027a8:	080028b5 	.word	0x080028b5
 80027ac:	08002873 	.word	0x08002873
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 fa18 	bl	8002bec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0208 	orr.w	r2, r2, #8
 80027ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699a      	ldr	r2, [r3, #24]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0204 	bic.w	r2, r2, #4
 80027da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6999      	ldr	r1, [r3, #24]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	691a      	ldr	r2, [r3, #16]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	619a      	str	r2, [r3, #24]
      break;
 80027ee:	e064      	b.n	80028ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68b9      	ldr	r1, [r7, #8]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 fa68 	bl	8002ccc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800280a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	699a      	ldr	r2, [r3, #24]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800281a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6999      	ldr	r1, [r3, #24]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	021a      	lsls	r2, r3, #8
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	619a      	str	r2, [r3, #24]
      break;
 8002830:	e043      	b.n	80028ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68b9      	ldr	r1, [r7, #8]
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fabd 	bl	8002db8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	69da      	ldr	r2, [r3, #28]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 0208 	orr.w	r2, r2, #8
 800284c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69da      	ldr	r2, [r3, #28]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0204 	bic.w	r2, r2, #4
 800285c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69d9      	ldr	r1, [r3, #28]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	61da      	str	r2, [r3, #28]
      break;
 8002870:	e023      	b.n	80028ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fb11 	bl	8002ea0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69da      	ldr	r2, [r3, #28]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800288c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	69da      	ldr	r2, [r3, #28]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800289c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	69d9      	ldr	r1, [r3, #28]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	021a      	lsls	r2, r3, #8
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	61da      	str	r2, [r3, #28]
      break;
 80028b2:	e002      	b.n	80028ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	75fb      	strb	r3, [r7, #23]
      break;
 80028b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_TIM_ConfigClockSource+0x1c>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e0b4      	b.n	8002a52 <HAL_TIM_ConfigClockSource+0x186>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800290e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002920:	d03e      	beq.n	80029a0 <HAL_TIM_ConfigClockSource+0xd4>
 8002922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002926:	f200 8087 	bhi.w	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 800292a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800292e:	f000 8086 	beq.w	8002a3e <HAL_TIM_ConfigClockSource+0x172>
 8002932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002936:	d87f      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002938:	2b70      	cmp	r3, #112	; 0x70
 800293a:	d01a      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0xa6>
 800293c:	2b70      	cmp	r3, #112	; 0x70
 800293e:	d87b      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002940:	2b60      	cmp	r3, #96	; 0x60
 8002942:	d050      	beq.n	80029e6 <HAL_TIM_ConfigClockSource+0x11a>
 8002944:	2b60      	cmp	r3, #96	; 0x60
 8002946:	d877      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002948:	2b50      	cmp	r3, #80	; 0x50
 800294a:	d03c      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0xfa>
 800294c:	2b50      	cmp	r3, #80	; 0x50
 800294e:	d873      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002950:	2b40      	cmp	r3, #64	; 0x40
 8002952:	d058      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x13a>
 8002954:	2b40      	cmp	r3, #64	; 0x40
 8002956:	d86f      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002958:	2b30      	cmp	r3, #48	; 0x30
 800295a:	d064      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x15a>
 800295c:	2b30      	cmp	r3, #48	; 0x30
 800295e:	d86b      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002960:	2b20      	cmp	r3, #32
 8002962:	d060      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x15a>
 8002964:	2b20      	cmp	r3, #32
 8002966:	d867      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002968:	2b00      	cmp	r3, #0
 800296a:	d05c      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x15a>
 800296c:	2b10      	cmp	r3, #16
 800296e:	d05a      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x15a>
 8002970:	e062      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6899      	ldr	r1, [r3, #8]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f000 fb5d 	bl	8003040 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002994:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	609a      	str	r2, [r3, #8]
      break;
 800299e:	e04f      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	6899      	ldr	r1, [r3, #8]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f000 fb46 	bl	8003040 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029c2:	609a      	str	r2, [r3, #8]
      break;
 80029c4:	e03c      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6859      	ldr	r1, [r3, #4]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	461a      	mov	r2, r3
 80029d4:	f000 faba 	bl	8002f4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2150      	movs	r1, #80	; 0x50
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fb13 	bl	800300a <TIM_ITRx_SetConfig>
      break;
 80029e4:	e02c      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	6859      	ldr	r1, [r3, #4]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	461a      	mov	r2, r3
 80029f4:	f000 fad9 	bl	8002faa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2160      	movs	r1, #96	; 0x60
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 fb03 	bl	800300a <TIM_ITRx_SetConfig>
      break;
 8002a04:	e01c      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6859      	ldr	r1, [r3, #4]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	461a      	mov	r2, r3
 8002a14:	f000 fa9a 	bl	8002f4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2140      	movs	r1, #64	; 0x40
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 faf3 	bl	800300a <TIM_ITRx_SetConfig>
      break;
 8002a24:	e00c      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4610      	mov	r0, r2
 8002a32:	f000 faea 	bl	800300a <TIM_ITRx_SetConfig>
      break;
 8002a36:	e003      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a3c:	e000      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a40      	ldr	r2, [pc, #256]	; (8002bc0 <TIM_Base_SetConfig+0x114>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d013      	beq.n	8002aec <TIM_Base_SetConfig+0x40>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aca:	d00f      	beq.n	8002aec <TIM_Base_SetConfig+0x40>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a3d      	ldr	r2, [pc, #244]	; (8002bc4 <TIM_Base_SetConfig+0x118>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00b      	beq.n	8002aec <TIM_Base_SetConfig+0x40>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a3c      	ldr	r2, [pc, #240]	; (8002bc8 <TIM_Base_SetConfig+0x11c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d007      	beq.n	8002aec <TIM_Base_SetConfig+0x40>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a3b      	ldr	r2, [pc, #236]	; (8002bcc <TIM_Base_SetConfig+0x120>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d003      	beq.n	8002aec <TIM_Base_SetConfig+0x40>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a3a      	ldr	r2, [pc, #232]	; (8002bd0 <TIM_Base_SetConfig+0x124>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d108      	bne.n	8002afe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a2f      	ldr	r2, [pc, #188]	; (8002bc0 <TIM_Base_SetConfig+0x114>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d02b      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0c:	d027      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a2c      	ldr	r2, [pc, #176]	; (8002bc4 <TIM_Base_SetConfig+0x118>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d023      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a2b      	ldr	r2, [pc, #172]	; (8002bc8 <TIM_Base_SetConfig+0x11c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d01f      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a2a      	ldr	r2, [pc, #168]	; (8002bcc <TIM_Base_SetConfig+0x120>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d01b      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a29      	ldr	r2, [pc, #164]	; (8002bd0 <TIM_Base_SetConfig+0x124>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d017      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a28      	ldr	r2, [pc, #160]	; (8002bd4 <TIM_Base_SetConfig+0x128>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d013      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a27      	ldr	r2, [pc, #156]	; (8002bd8 <TIM_Base_SetConfig+0x12c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00f      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a26      	ldr	r2, [pc, #152]	; (8002bdc <TIM_Base_SetConfig+0x130>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00b      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a25      	ldr	r2, [pc, #148]	; (8002be0 <TIM_Base_SetConfig+0x134>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d007      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a24      	ldr	r2, [pc, #144]	; (8002be4 <TIM_Base_SetConfig+0x138>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d003      	beq.n	8002b5e <TIM_Base_SetConfig+0xb2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a23      	ldr	r2, [pc, #140]	; (8002be8 <TIM_Base_SetConfig+0x13c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d108      	bne.n	8002b70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <TIM_Base_SetConfig+0x114>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d003      	beq.n	8002ba4 <TIM_Base_SetConfig+0xf8>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a0c      	ldr	r2, [pc, #48]	; (8002bd0 <TIM_Base_SetConfig+0x124>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d103      	bne.n	8002bac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	615a      	str	r2, [r3, #20]
}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40010000 	.word	0x40010000
 8002bc4:	40000400 	.word	0x40000400
 8002bc8:	40000800 	.word	0x40000800
 8002bcc:	40000c00 	.word	0x40000c00
 8002bd0:	40010400 	.word	0x40010400
 8002bd4:	40014000 	.word	0x40014000
 8002bd8:	40014400 	.word	0x40014400
 8002bdc:	40014800 	.word	0x40014800
 8002be0:	40001800 	.word	0x40001800
 8002be4:	40001c00 	.word	0x40001c00
 8002be8:	40002000 	.word	0x40002000

08002bec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	f023 0201 	bic.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0303 	bic.w	r3, r3, #3
 8002c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f023 0302 	bic.w	r3, r3, #2
 8002c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a20      	ldr	r2, [pc, #128]	; (8002cc4 <TIM_OC1_SetConfig+0xd8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d003      	beq.n	8002c50 <TIM_OC1_SetConfig+0x64>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a1f      	ldr	r2, [pc, #124]	; (8002cc8 <TIM_OC1_SetConfig+0xdc>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d10c      	bne.n	8002c6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f023 0308 	bic.w	r3, r3, #8
 8002c56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f023 0304 	bic.w	r3, r3, #4
 8002c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a15      	ldr	r2, [pc, #84]	; (8002cc4 <TIM_OC1_SetConfig+0xd8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d003      	beq.n	8002c7a <TIM_OC1_SetConfig+0x8e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <TIM_OC1_SetConfig+0xdc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d111      	bne.n	8002c9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	621a      	str	r2, [r3, #32]
}
 8002cb8:	bf00      	nop
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	40010000 	.word	0x40010000
 8002cc8:	40010400 	.word	0x40010400

08002ccc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f023 0210 	bic.w	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	021b      	lsls	r3, r3, #8
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f023 0320 	bic.w	r3, r3, #32
 8002d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a22      	ldr	r2, [pc, #136]	; (8002db0 <TIM_OC2_SetConfig+0xe4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d003      	beq.n	8002d34 <TIM_OC2_SetConfig+0x68>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a21      	ldr	r2, [pc, #132]	; (8002db4 <TIM_OC2_SetConfig+0xe8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d10d      	bne.n	8002d50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a17      	ldr	r2, [pc, #92]	; (8002db0 <TIM_OC2_SetConfig+0xe4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d003      	beq.n	8002d60 <TIM_OC2_SetConfig+0x94>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a16      	ldr	r2, [pc, #88]	; (8002db4 <TIM_OC2_SetConfig+0xe8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d113      	bne.n	8002d88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	621a      	str	r2, [r3, #32]
}
 8002da2:	bf00      	nop
 8002da4:	371c      	adds	r7, #28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40010000 	.word	0x40010000
 8002db4:	40010400 	.word	0x40010400

08002db8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 0303 	bic.w	r3, r3, #3
 8002dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a21      	ldr	r2, [pc, #132]	; (8002e98 <TIM_OC3_SetConfig+0xe0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d003      	beq.n	8002e1e <TIM_OC3_SetConfig+0x66>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a20      	ldr	r2, [pc, #128]	; (8002e9c <TIM_OC3_SetConfig+0xe4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d10d      	bne.n	8002e3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a16      	ldr	r2, [pc, #88]	; (8002e98 <TIM_OC3_SetConfig+0xe0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d003      	beq.n	8002e4a <TIM_OC3_SetConfig+0x92>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a15      	ldr	r2, [pc, #84]	; (8002e9c <TIM_OC3_SetConfig+0xe4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d113      	bne.n	8002e72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	621a      	str	r2, [r3, #32]
}
 8002e8c:	bf00      	nop
 8002e8e:	371c      	adds	r7, #28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	40010000 	.word	0x40010000
 8002e9c:	40010400 	.word	0x40010400

08002ea0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002eea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	031b      	lsls	r3, r3, #12
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <TIM_OC4_SetConfig+0xa4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d003      	beq.n	8002f08 <TIM_OC4_SetConfig+0x68>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a11      	ldr	r2, [pc, #68]	; (8002f48 <TIM_OC4_SetConfig+0xa8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d109      	bne.n	8002f1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	019b      	lsls	r3, r3, #6
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	621a      	str	r2, [r3, #32]
}
 8002f36:	bf00      	nop
 8002f38:	371c      	adds	r7, #28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40010000 	.word	0x40010000
 8002f48:	40010400 	.word	0x40010400

08002f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	f023 0201 	bic.w	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f023 030a 	bic.w	r3, r3, #10
 8002f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	621a      	str	r2, [r3, #32]
}
 8002f9e:	bf00      	nop
 8002fa0:	371c      	adds	r7, #28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b087      	sub	sp, #28
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	f023 0210 	bic.w	r2, r3, #16
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	031b      	lsls	r3, r3, #12
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fe6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	621a      	str	r2, [r3, #32]
}
 8002ffe:	bf00      	nop
 8003000:	371c      	adds	r7, #28
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800300a:	b480      	push	{r7}
 800300c:	b085      	sub	sp, #20
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003020:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	f043 0307 	orr.w	r3, r3, #7
 800302c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	609a      	str	r2, [r3, #8]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800305a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	021a      	lsls	r2, r3, #8
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	431a      	orrs	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	4313      	orrs	r3, r2
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	609a      	str	r2, [r3, #8]
}
 8003074:	bf00      	nop
 8003076:	371c      	adds	r7, #28
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	2201      	movs	r2, #1
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a1a      	ldr	r2, [r3, #32]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	401a      	ands	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a1a      	ldr	r2, [r3, #32]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	fa01 f303 	lsl.w	r3, r1, r3
 80030b8:	431a      	orrs	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	621a      	str	r2, [r3, #32]
}
 80030be:	bf00      	nop
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e05a      	b.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a21      	ldr	r2, [pc, #132]	; (80031a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d022      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003130:	d01d      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d018      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1b      	ldr	r2, [pc, #108]	; (80031b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d013      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1a      	ldr	r2, [pc, #104]	; (80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00e      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a18      	ldr	r2, [pc, #96]	; (80031b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d009      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a17      	ldr	r2, [pc, #92]	; (80031bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d004      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a15      	ldr	r2, [pc, #84]	; (80031c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d10c      	bne.n	8003188 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	4313      	orrs	r3, r2
 800317e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40010000 	.word	0x40010000
 80031ac:	40000400 	.word	0x40000400
 80031b0:	40000800 	.word	0x40000800
 80031b4:	40000c00 	.word	0x40000c00
 80031b8:	40010400 	.word	0x40010400
 80031bc:	40014000 	.word	0x40014000
 80031c0:	40001800 	.word	0x40001800

080031c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80031dc:	2302      	movs	r3, #2
 80031de:	e03d      	b.n	800325c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	4313      	orrs	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4313      	orrs	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4313      	orrs	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	4313      	orrs	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <memset>:
 8003290:	4402      	add	r2, r0
 8003292:	4603      	mov	r3, r0
 8003294:	4293      	cmp	r3, r2
 8003296:	d100      	bne.n	800329a <memset+0xa>
 8003298:	4770      	bx	lr
 800329a:	f803 1b01 	strb.w	r1, [r3], #1
 800329e:	e7f9      	b.n	8003294 <memset+0x4>

080032a0 <__libc_init_array>:
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	4d0d      	ldr	r5, [pc, #52]	; (80032d8 <__libc_init_array+0x38>)
 80032a4:	4c0d      	ldr	r4, [pc, #52]	; (80032dc <__libc_init_array+0x3c>)
 80032a6:	1b64      	subs	r4, r4, r5
 80032a8:	10a4      	asrs	r4, r4, #2
 80032aa:	2600      	movs	r6, #0
 80032ac:	42a6      	cmp	r6, r4
 80032ae:	d109      	bne.n	80032c4 <__libc_init_array+0x24>
 80032b0:	4d0b      	ldr	r5, [pc, #44]	; (80032e0 <__libc_init_array+0x40>)
 80032b2:	4c0c      	ldr	r4, [pc, #48]	; (80032e4 <__libc_init_array+0x44>)
 80032b4:	f000 f818 	bl	80032e8 <_init>
 80032b8:	1b64      	subs	r4, r4, r5
 80032ba:	10a4      	asrs	r4, r4, #2
 80032bc:	2600      	movs	r6, #0
 80032be:	42a6      	cmp	r6, r4
 80032c0:	d105      	bne.n	80032ce <__libc_init_array+0x2e>
 80032c2:	bd70      	pop	{r4, r5, r6, pc}
 80032c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c8:	4798      	blx	r3
 80032ca:	3601      	adds	r6, #1
 80032cc:	e7ee      	b.n	80032ac <__libc_init_array+0xc>
 80032ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d2:	4798      	blx	r3
 80032d4:	3601      	adds	r6, #1
 80032d6:	e7f2      	b.n	80032be <__libc_init_array+0x1e>
 80032d8:	08003318 	.word	0x08003318
 80032dc:	08003318 	.word	0x08003318
 80032e0:	08003318 	.word	0x08003318
 80032e4:	0800331c 	.word	0x0800331c

080032e8 <_init>:
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ea:	bf00      	nop
 80032ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ee:	bc08      	pop	{r3}
 80032f0:	469e      	mov	lr, r3
 80032f2:	4770      	bx	lr

080032f4 <_fini>:
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f6:	bf00      	nop
 80032f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fa:	bc08      	pop	{r3}
 80032fc:	469e      	mov	lr, r3
 80032fe:	4770      	bx	lr
